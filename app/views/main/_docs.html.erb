<div id="about-docs" class="bs-docs-container docs-content">
  <div class="row">
    <div class="col-sm-16">
      <div id="introduction" class="h1">Introduction</div>
      <div class="bs-docs-section">
        <p>Welcome to precisionFDA, the community platform for NGS assay evaluation and regulatory science exploration.</p>

        <p>We are excited to have you on board, and have prepared this guide to help you make the most out of the precisionFDA platform. We hope that this guide will answer many of your questions and provide you with additional insights to further empower you to use the system. If your favorite topic is not covered, please don't hesitate to <a href="mailto:precisionfda@fda.hhs.gov">contact us</a>, and we'll make sure to expand the guide accordingly.</p>

        <p>If you've already logged onto the system, you will have noticed that the precisionFDA website is divided into four sections: <a href="#notes">Notes</a>, <a href="#files">Files</a>, <a href="#comparisons">Comparisons</a> and <a href="#apps">Apps</a>. These are further discussed in the sections below.</p>

        <div class="alert alert-info">
          <span class="fa fa-lightbulb-o" aria-hidden="true"></span> <strong>TIP:</strong> The precisionFDA platform is currently in beta, and is expected to evolve and change over time. If you encounter an error page during your interaction with the site, we encourage you to <a href="mailto:precisionfda@fda.hhs.gov">report feedback</a> and tell us what you were trying to do at the time and how you got to the error page. We appreciate your help!
        </div>
      </div>

      <div id="files" class="h1">Files</div>
      <div class="bs-docs-section">
        <p>As with all systems, precisionFDA relies on files to store data. Files can be uploaded from your computer or generated by running apps, and can be shared with the precisionFDA community.</p>
      </div>
      <div id="files-list" class="h2">Listing files</div>
      <div class="bs-docs-section">
        <p>Clicking on "Files" at the top navigation bar takes you to the a page that lists all the files accessible by your account. Files owned by you are shown under "My Files" Members' contributions (including yours) are shown under "Explore". You can further filter files (for example, search for a given filename keyword) by clicking on the "eye" icon, which will reveal a filter bar. Choose any filters and apply them by clicking on the "funnel" icon.</p>
      </div>
      <div id="files-uploading" class="h2">Uploading files</div>
      <div class="bs-docs-section">
        <p>You can upload small files directly from your web browser by clicking "Add files". Choose the files you want to upload, and click "Upload all" to begin the upload to cloud storage. To ensure integrity, your web browser will automatically calculate a checksum of the uploaded content and ensure that it matches the checksum calculated on the cloud side.</p>

        <p>Once the upload is complete, the system will perform some additional finalization. This process usually takes a few seconds, during which the file is in a "closing" state. After finalization is completed, the file becomes "closed" and can now be used within precisionFDA (downloaded, published, or provided as input in apps). Its contents can never be changed, and it is given a unique immutable id of the form "file-Bk0kjkQ0ZP01x1KJqQyqJ7yq" to distinguish it across the whole site.</p>

        <p>If the upload gets interrupted for any reason, you will see the partially-uploaded file in your list of files, marked with an "open" state. Please delete the file and reupload it. Periodically, the precisionFDA system may automatically clean up partially uploaded files.</p>

        <div class="alert alert-info">
          <span class="fa fa-lightbulb-o" aria-hidden="true"></span> <strong>TIP:</strong> Web browsers have limitations regarding the upload capabilities. Therefore, you should only use that method for small files. Read below for additional options if you have large data to upload.
        </div>

        <p>For large files that are accessible over the Internet, we suggest running the "Fetch file from URL" app, which has been provided by the precisionFDA team. The app allows you to fetch a file from a given URL.</p>

        <p>For large files that are on your computer, we suggest using the <strong>precisionFDA uploader</strong>, a command-line tool capable of uploading with multiple threads and more resilient to transient errors.
        The precisionFDA uploader can be used for both files and app assets, and it's available through the <a href="<%= new_asset_path %>">Create Assets</a> page.</p>

        <p>Visit that page and download the precisionFDA uploader by clicking the respective button under "Step 3". (NOTE: The uploader requires Python 2.7, as well as the python 'requests' and 'futures' packages, so ensure you have those available in your environment).</p>
        <p>The tool requires an "authorization key" in order to authenticate the client against the precisionFDA system. You can get a key by clicking the respective button under "Step 4" in the "Add Assets" page. Copy the key from that page and paste it in the command below where it says <strong>KEY</strong>. For your security, the key is valid for 24h.</p>
        <p>Run <code>./pfda upload-file --auth KEY /path/to/file</code>. This command will upload the file to precisionFDA.</p>
        <div class="alert alert-info">
          <span class="fa fa-lightbulb-o" aria-hidden="true"></span> <strong>TIP:</strong> The uploader saves your key in <code>$HOME/.config/precision-fda/config.json</code>, so after you have run it once, you don't need to specify the key in subsequent invocations.
        </div>

      </div>
      <div id="files-origin" class="h2">Examining file origin</div>
      <div class="bs-docs-section">
        <p>The system automatically records the origin of files. The "origin" column describes how each file got introduced to precisionFDA; it is set to "Uploaded" if the file was directly uploaded; otherwise it points to a <a href="#jobs">job</a> if the file was generated by running an app. Further information can be obtained using the <a href="#track">tracking feature</a>.</p>
      </div>
      <div id="files-details" class="h2">File details</div>
      <div class="bs-docs-section">
        <p>Clicking on a filename in the files list (or on other file links that appear in certain precisionFDA areas) takes you to the file details page, which shows information such as filename, unique id, size, creation time, and origin. In addition, if the file has been used as input to any <a href="#comparisons">comparisons</a> or has been attached to any <a href="#notes">notes</a>, those will also be visible in respective sub-sections.</p>

        <p>This page shows one or more action buttons, depending on the file state and your permissions:</p>

        <table class="table table-bordered">
          <thead>
            <th>Click...</th>
            <th>In order to...</th>
          </thead>
          <tbody>
            <tr>
              <td>Attach to Note</td>
              <td>Attach the file to a note. See the <a href="#notes">notes</a> section for more info.</td>
            </tr>
            <tr>
              <td>Open</td>
              <td>Open the file inline in your browser (if your browser supports it). Use this action to see the content of text files, PDF files, images, etc.</td>
            </tr>
            <tr>
              <td>Download</td>
              <td>Download the file.</td>
            </tr>
            <tr>
              <td>Track</td>
              <td>Display a graph tracking the file's provenance. See <a href="#track">Tracking</a> for more info.</td>
            </tr>
            <tr>
              <td>Publish</td>
              <td>Publicly contribute the file to the precisionFDA community. See <a href="#publish">Publishing</a> for more info.</td>
            </tr>
            <tr>
              <td>Delete</td>
              <td>Permanently remove the file from precisionFDA.</td>
            </tr>
          </tbody>
        </table>
      </div>

      <div id="comparisons" class="h1">Comparisons</div>
      <div class="bs-docs-section">
        <p>The concept of comparing two sets of variants (VCF files) is central to the exploration of regulatory science, and to the evaluation of NGS assays; it is therefore represented as a first-class entity on precisionFDA.</p>

        <p>The problem of comparing VCF files constitutes an active area of research. The precisionFDA building crew is represented in the Global Alliance for Genomics and Health (GA4GH) Benchmarking Task Team, which is expected (within the next year) to provide recommendations and/or software solutions for comparing VCFs and for counting, classifying, and reporting results. We are looking forward to incorporating that work into precisionFDA, when it becomes available. In the meantime, we have put together an initial VCF comparison framework which you can use as of now on precisionFDA.</p>

        <p>This initial framework compares two variant sets; a <em>test set</em> and a <em>benchmark set</em>. The underlying comparison methodology is mostly symmetric with respect to each assignment; however, reporting of the results is based on the assumption that the benchmark set represents the truth, and that the test set represents predictions. Therefore, the results of a comparison constitute an implicit evaluation of the performance of whatever method was used to generate the predictions.</p>
      </div>
      <div id="comparisons-new" class="h2">Creating a new comparison</div>
      <div class="bs-docs-section">
        <p>To create a new comparison, click "Run Comparison". Set up your comparison by choosing a VCF (*.vcf.gz) file and an associated TBI (*.vcf.gz.tbi) file for your test set, as well as a VCF+TBI file for your benchmark set. To choose files, locate the file you want to use and click the "Assign" button to its left, then designate the role of that file and the set that it belongs to. You can filter files by typing a keyword inside the "Filter..." box, to more quickly locate the files you want to choose. (This setup procedure is work in progress, and we expect to further simplify it in an upcoming update).</p>

        <p>The comparison currently only works with VCF files reported on the GRCh37 human assembly, using the "GRCh37/b37" naming conventions (i.e. chromosomes named 1, 2, ..., X, Y, and MT). It is <u>not compatible</u> with the "hg19" naming conventions (i.e. with chromosomes named chr1, chr2, ..., chrX, chrY and chrM). In addition, please note that the hg19 "chrM" sequence has different length and content that the GRCh37 "MT" sequence, so the two aren't comparable anyway.</p>

        <p>Once you have chosen the input files, the "Compare" button will light up in the center. Click it and enter a name for your comparison to launch the comparison process.</p>
      </div>
      <div id="comparisons-bed" class="h2">BED files</div>
      <div class="bs-docs-section">
        <p>In addition to the VCF files, you may provide up to two BED files. These BED files dictate the genomic regions inside which you want the comparison to be performed. If no BED files are provided, the comparison will be performed across the whole genome, and will compare all entries of each of the test and benchmark variant files. If a BED file is provided (or if two BED files are provided, in which case their genomic regions will be intersected into a single set of regions), the comparison is only done within those regions, and all entries that are not within those regions are ignored.</p>

        <p>This is very important in cases such as when comparing an exome test set to a whole-genome benchmark set: without a BED file, the comparison will report a lot of false negatives, as it expects the test set to identify all the variants contained in the benchmark set across the whole genome.</p>

        <p>Similarly, if a whole-genome test set is compared against a smaller benchmark set without a BED file, the comparison will report a lot of false positives, as it expects the test set to not report any variants in regions that are outside of the benchmark set's scope.</p>

        <p>Popular benchmark sets (such as the NA12878 NISTv2.19 calls or the NA12878 Illumina Platinum Genome calls) typically come with their own associated BED file.</p>

        <p>If you are generating your own test set by applying some NGS methodology on a known biospecimen (such as NA12878), and want to run a comparison against a benchmark set, make sure to also provide a test set BED file (unless you are investigating the whole genome). Typically the BED file will contain the genomic coordinates of the enrichment kit you are using, or otherwise represent the genomic regions that you are investigating.</p>
      </div>
      <div id="comparisons-results" class="h2">Understanding comparison results</div>
      <div class="bs-docs-section">
        <p>Once launching a comparison, it will be queued for execution in the cloud. Its state will change from "idle" to "runnable", then "running" and finally "done" or "failed". Behind the scenes, a virtual cloud computer will run the Real Time Genomics vcfeval software to compare the two variant sets. A comparison can fail if the input files are not in the right format, or if they are not using GRCh37 conventions, or due to other circumstances. (Debugging failed comparisons is a feature planned for inclusion in an upcoming update). A successful comparison will report several metrics, including the following:</p>

        <table class="table table-bordered">
          <thead>
            <th>Metric</th>
            <th>Meaning / Formula</th>
          </thead>
          <tbody>
            <tr>
              <td>True positives</td>
              <td>The number of variants found in the test set that match exactly the benchmark set.</td>
            </tr>
            <tr>
              <td>False positives</td>
              <td>The number of variants found in the test set that did not match exactly the benchmark set.</td>
            </tr>
            <tr>
              <td>False negatives</td>
              <td>The number of variants found in the benchmark set that did not match exactly the test set.</td>
            </tr>
            <tr>
              <td>Precision (PPV)</td>
              <td>(true positives) / (true positives + false positives)</td>
            </tr>
            <tr>
              <td>Recall (sensitivity)</td>
              <td>(true positives) / (true positives + false negatives)</td>
            </tr>
            <tr>
              <td>F-measure</td>
              <td>2 * precision * recall / (precision + recall)</td>
            </tr>
          </tbody>
        </table>

        <p>The VCF files produced by typical variant callers include an associated metric (reported individually for each variant) called "GQ" (genotype quality). It represents the Phred-scaled likelihood that the genotype call is wrong. The comparison framework explores how the results would change if we were to apply a certain GQ threshold. Typically, as the threshold is increased (i.e. when selecting only the highest quality variants), the precision is increased (as there fewer false positives) but the recall/sensitivity is decreased (as there are more false negatives). The comparison output includes a curve which shows how precision and sensitivity change when varying the threshold on the GQ score. The slope of the curve is sometimes indicative of the performance of the variation calling algorithm (however, this is still an area of debate).</p>

        <p>The comparison will also produce the following files. For simplicity, these files remain associated to the comparison and are managed as a unit along with the comparison -- they do not show up in the Files section of the website. These files are generated verbatim by the "vcfeval" program used in the comparison framework.</p>

        <table class="table table-bordered">
          <thead>
            <th>File(s)</th>
            <th>Content</th>
          </thead>
          <tbody>
            <tr>
              <td>tp.vcf.gz, tp.vcf.gz.tbi</td>
              <td>The variants that were identified as true positives</td>
            </tr>
            <tr>
              <td>fp.vcf.gz, fp.vcf.gz.tbi</td>
              <td>The variants that were identified as false positives</td>
            </tr>
            <tr>
              <td>fn.vcf.gz, fn.vcf.gz.tbi</td>
              <td>The variants that were identified as false negatives</td>
            </tr>
            <tr>
              <td>weighted_roc.tsv</td>
              <td>The points used to draw the curve</td>
            </tr>
            <tr>
              <td>vcfeval.log</td>
              <td>The log file produced by the vcfeval program</td>
            </tr>
            <tr>
              <td>summary.txt</td>
              <td>A summary of the comparison</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div id="comparisons-visualize" class="h2">Visualizing a comparison</div>
      <div class="bs-docs-section">
        <p>By clicking on "Visualize comparison" you can launch a genome browser which includes two variant tracks; one for false positives and one for false negatives. You can navigate around the genome by typing chromosomal coordinates or gene names, and you can click on variants to look at their original VCF annotations. This feature is based on the open-source BioDalliance genome browser. Additional information on how to use it can be found at <a href="http://www.biodalliance.org/started.html">http://www.biodalliance.org/started.html</a>.</p>
      </div>
      <div id="comparisons-ideas" class="h2">Ideas for using comparisons</div>
      <div class="bs-docs-section">
        <p class="lead">Assess reproducibility of an NGS test</p>
        <ul>
          <li>Conduct an NGS test twice on the same specimen, and get two VCF results.</li>
          <li>Upload these to precisionFDA and run a comparison.</li>
          <li>Although you need to arbitrarily specify one VCF as the benchmark set, you can still interpret the results in a way that is useful to assessing reproducibility; for example, the precision and recall values are proxies for "percentage of overlapping entries" or "positive percent agreement".</li>
        </ul>

        <p class="lead">Assess accuracy of an NGS test using a reference sample</p>
        <ul>
          <li>Order a reference sample (such as NA12878, available as <a target="_blank" href="https://www-s.nist.gov/srmors/view_detail.cfm?srm=8398">NIST RM 8398</a>)</li>
          <li>Conduct an NGS test and obtain a VCF file (and, if applicable, an associated BED file).</li>
          <li>Upload these to precisionFDA and run a comparison against the NA12878-NISTv2.19 benchmark set and/or the NA12878-Illumina-Platinum-Genome benchmark set.</li>
        </ul>

        <p class="lead">Assess accuracy of a mapping and variation calling pipeline using a reference sample</p>
        <ul>
          <li>Load your pipeline onto precisionFDA (see <a href="#apps">apps</a>).</li>
          <li>Locate reads (FASTQ files) for a reference sample, such as NA12878-Garvan-Vial1.</li>
          <li>Run the pipeline using the FASTQ files as inputs and obtain a VCF file (and, if applicable, an associated BED file).</li>
          <li>Run a comparison against a benchmark set appropriate for that reference sample (such as the ones mentioned in the previous idea).</li>
        </ul>
      </div>

      <div id="apps" class="h1">Apps</div>
      <div class="bs-docs-section">
        <p>The Apps section of precisionFDA encapsulates all the activities for managing, running and sharing software. The system uses cloud technology that allows you to run any Linux software. You can explore and run apps published by other precisionFDA members, or introduce your own.</p>
      </div>
      <div id="apps-overview" class="h2">Overview &amp; Terminology</div>
      <div class="bs-docs-section">
        <p><strong>Apps</strong> are, in essence, shell scripts that run inside a Linux virtual machine on the cloud, and which are designed to perform whatever specific task has been envisioned by the app author. Apps come with an <strong>I/O specification</strong>, a 'contract' that describes the kinds of inputs they receive and the kinds of outputs they are expected to generate. For example, an app that performs mapping and variation calling may specify that it requires as input one or two FASTQ files, and that it will generate as output a BAM and a VCF file.</p>
        <p>To run an app, the user needs to assign the app inputs (i.e. in the aforementioned example of the hypothetical mapping and variation calling app, the user needs to specify which FASTQ file they want to use). This creates a <strong>job</strong>, which is scheduled for execution in the cloud. Once the job completes, its output files (if any) will appear in the Files section.</p>
        <p>Jobs are executed inside virtual machines (VMs) with specific hardware configurations, known as <strong>instance types</strong>. Each instance type comes with a specific amount of memory, number of CPU cores, and hard disk storage. The app author chooses a default instance type when creating an app, but users who run the app can override the default choice.</p>
        <p>The virtual machine runs Ubuntu Linux 14.04 with certain preinstalled <strong>Ubuntu packages</strong>. The app author, however, can select additional Ubuntu packages to be included with an app.</p>
        <p>Apps are assembled from building blocks called <strong>app assets</strong>, which can be provided by the app author, or chosen from a library of existing assets provided by the precisionFDA community. App assets are simply tarballs (file archives), which get automatically unpacked inside the virtual machine when an app runs. They can contain executables (such as bioinformatics tools), static data (such as reference genomes and index files) or pretty much anything else that is required for an app to run.</p>
        <p>After creating an app, the app author can further revise it. However, each change creates a new <strong>revision</strong>; previous revisions are retained and cannot be overwritten. When the author is happy with a particular revision, they can publish it so that others can use it. Subsequent revisions remain private until published. Users always see the latest published revision (but have access to all published revisions).</p>
      </div>
      <div id="apps-listing" class="h2">Listing apps</div>
      <div class="bs-docs-section">
        <p>The Apps page shows a collection of all the apps that you have access to. The "Relevant apps" section displays apps that you've created yourself, as well as third-party apps that you've run. The left pane displays the name of each app, and the username of its author underneath. (If the author is part of an organization, the name of the organization is prepended to the author's username). The right pane shows general information about the app, such as its input/output specifications, the app's "Readme" information, or any notes that it's attached to. If you've previously run this app, the right pane will display a list of jobs instead. You can also list jobs across all apps by clicking "All My Jobs" on the left.</p>
        <p>The "Explore" section lists all publicly contributed apps, in order of creation time. The "explorers" column counts the number of users who have run the app. The "Ran by you?" column is set to "Yes" if you've run the latest published revision of the app, or "Not this revision" if you've run an earlier revision. If you've never run the app, the column shows a button for you to try out the app.</p>
      </div>
      <div id="apps-run" class="h2">Running an app</div>
      <div class="bs-docs-section">
        <p>Click "Run App" to be taken to the app launch page. The page gets rendered according to the app's input/output specification. For each app input, you will be asked to provide a value. File inputs will present you with a "Select file..." button which you can use to choose a file from all the files accessible to you. String, integer, and float inputs will present you with a textbox to type a value (unless the author has pre-defined a set of choices for you to select from, in which case you will be presented with a drop-down menu). Boolean inputs will present you with True/False buttons.</p>
        <p>The app specification may designate which inputs are required and which are optional, and may provide default values for some of them. Required inputs are rendered in bold text (and those that need your attention are colored red), and the "Run App" button on the upper right will turn blue once all the required inputs have been provided.</p>
        <p>Additional help for each input (if provided by the app author) can be shown by hovering over the input label.</p>
        <p>It is a good idea to give a unique name to this execution, describing what it is about. You can do so by editing the "Job Name" textbox at the top. The box is pre-filled with the app's name as a starting point.</p>
        <p>The app author has designated a specific hardware configuration (instance type) for the app to run on by default. If you need to change it (for example, if you are providing very large files, and the default instance type would cause the app to run out of hard disk space), then select a different instance type from the dropdown. See the <a href="#dev-instance-types">available instance types</a> for more info.</p>
        <p>Once you click the "Run App" button on the upper right, the system will generate a new job that encapsulates that particular execution.</p>
      </div>

      <div id="job-details" class="h2">Job details and logs</div>
      <div class="bs-docs-section">
        <p>Clicking on a job will take you to the job details page. The bottom section of the page shows the inputs that were chosen when the job was launched. If the job has finished successfully, it also shows the generated outputs. If the job has failed, it shows information related to the error.</p>
        <p>The top section shows the job's <strong>state</strong> next to its name. Jobs go through the following states:</p>

        <table class="table table-bordered">
          <thead>
            <th>State</th>
            <th>Meaning</th>
          </thead>
          <tbody>
            <tr>
              <td>idle</td>
              <td>The job has just been submitted. (Unless there is a cloud exception, jobs stay in that state only for a few seconds).</td>
            </tr>
            <tr>
              <td>runnable</td>
              <td>The job has been scheduled for execution, and a new virtual machine is getting initialized in order to run the job. Depending on cloud conditions, jobs may remain in that state anywhere between 0 and 20 minutes.</td>
            </tr>
            <tr>
              <td>running</td>
              <td>The job is currently running.</td>
            </tr>
            <tr>
              <td>waiting_on_output</td>
              <td>The job has finished successfully and has produced files which are being finalized by the system.</td>
            </tr>
            <tr>
              <td>done</td>
              <td>The job has finished successfully and its file outputs are available in the Files section.</td>
            </tr>
            <tr>
              <td>failed</td>
              <td>The job has failed. (In this case, no outputs are produced).</td>
            </tr>
            <tr>
              <td>terminated</td>
              <td>The job was terminated by the user before it had a chance to finish.</td>
            </tr>
          </tbody>
        </table>
        <p>The top section of the job details page displays additional information, including the job's instance type, duration and <strong>energy consumed</strong>. The energy consumed is calculated from a formula that takes into account the instance type as well as the duration. Jobs that run longer or that use more powerful instance types will consume more energy. Therefore, this metric can be used to compare pipelines in terms of their algorithmic efficiency.</p>
        <div class="alert alert-info">
          <span class="fa fa-lightbulb-o" aria-hidden="true"></span> <strong>TIP:</strong> Try to be green! Always optimize your workload by selecting the appropriate instance type when creating apps or launching jobs. Although the FDA is sponsoring your cloud usage, it may impose penalties if you end up wasting too much energy.
        </div>
        <p>After the job has started running, you can review its log by clicking the "View Log" button. The log shows each line of the app script as it is being executed, and any messages generated in the Linux "standard output" or "standard error" streams. In addition, every 10 minutes the log shows a status line with memory, CPU, hard drive, and network bandwidth utilization. If you are looking at the logs while the job is running, click the "Refresh" button (or simply refresh the web page) to fetch any log updates &mdash; the page does not update itself in real time.</p>
        <p>If the job is running (or queued for execution), you can terminate it by clicking the "Terminate" button.</p>
      </div>
      <div id="dev" class="h1">Creating Apps</div>
      <div class="bs-docs-section">
        <p>To create a new app, click "Create App" in the Apps page. The following section walks you through important concepts of app development.</p>
        <div class="alert alert-info">
          <span class="fa fa-lightbulb-o" aria-hidden="true"></span> <strong>TIP:</strong> Want to learn by example? Simply choose any of the public apps in precisionFDA and click "Fork". This will load up the app editor, where you can take a look at the internals of the app and see what it is comprised of. You can then hit the Back button in your web browser -- unless of course you truly want to fork the app and make a private copy with which you can experiment, in which case click the new Fork button from inside the app editor to complete the operation.
        </div>
      </div>
      <div id="dev-name" class="h2">App naming conventions</div>
      <div class="bs-docs-section">
        <p>Apps have a machine-readable name that cannot contain spaces (such as "bwa-freebayes") and a human-readable title (such as "BWA-MEM and FreeBayes"). Among apps that you create, names need to be unique (you cannot author two distinct apps with the same name). This restriction is only per-user, meaning that you can still create an app with the same name as someone else's app. In fact, the system encourages you to use someone else's app as a starting point and make further tweaks and save it as your own app (a process called "<strong>forking</strong>" an app). This model was inspired from the model of GitHub repositories.</p>
      </div>
      <div id="dev-io" class="h2">Input and Output spec</div>
      <div class="bs-docs-section">
        <p>Apps require an input/output specification, which mandates what inputs they need from the user, and what outputs they are expected to generate. Note that an "input" is anything that needs to be received from the user and which can potentially vary between executions. These can be not only input files but also numerical or boolean values, and strings. In that sense, the "inputs" can be used both for receiving data to operate on as well as receiving configuration parameters. Each input field has the following properties:</p>
        <table class="table table-bordered">
          <thead>
            <th>Property</th>
            <th>Explanation</th>
          </thead>
          <tbody>
            <tr>
              <td>Class</td>
              <td>The kind of input. There are exactly five classes supported: file, string, integer, float and boolean.</td>
            </tr>
            <tr>
              <td>Name</td>
              <td>A machine-readable name for this input (no spaces allowed). The system will create a shell variable named after this, for your script to use.</td>
            </tr>
            <tr>
              <td>Label</td>
              <td>A human-readable label for this input. The system uses this to render the form that users see when launching the app.</td>
            </tr>
            <tr>
              <td>Help text</td>
              <td>Additional help text describing what this input field is about. The system shows this help text in the app details page ("spec" tab), and upon hovering on an input during app launch.</td>
            </tr>
            <tr>
              <td>Default value</td>
              <td>A default value that this field will be pre-filled with when users launch the app. (You are not required to provide defaults; do so only if you need to guide users in choosing the right values.)</td>
            </tr>
            <tr>
              <td>Choices</td>
              <td>A set of comma-separated values denoting the only permitted values for this field. If such choices are provided, the user must choose one of them using a drop-down menu and can't write in their own value.</td>
            </tr>
            <tr>
              <td>Optional?</td>
              <td>Whether this field is optional or required. When launching an app, users must fill all required fields before they can continue.</td>
            </tr>
          </tbody>
        </table>
        <div class="bs-callout bs-callout-primary bs-callout-darker">
          <h4>Input spec example</h4>
          <p>Let's consider an app which takes a BED file with genomic intervals, and extends each interval's coordinates by adding a fixed amount of padding on both sides. Here's an example of input spec:</p>
          <table class="table table-bordered">
            <thead>
              <th>Property</th>
              <th>Value for 1st input</th>
              <th>Value for 2nd input</th>
            </thead>
            <tbody>
              <tr>
                <td>Class</td>
                <td>file</td>
                <td>integer</td>
              </tr>
              <tr>
                <td>Name</td>
                <td>intervals</td>
                <td>padding</td>
              </tr>
              <tr>
                <td>Label</td>
                <td>BED file with intervals</td>
                <td>Padding amount to add</td>
              </tr>
              <tr>
                <td>Help text</td>
                <td>The BED file whose genomic intervals will be extended.</td>
                <td>The number of base pairs to extend each interval along both directions.</td>
              </tr>
              <tr>
                <td>Default value</td>
                <td></td>
                <td>10</td>
              </tr>
              <tr>
                <td>Choices</td>
                <td>&nbsp;</td>
                <td>&nbsp;</td>
              </tr>
              <tr>
                <td>Optional?</td>
                <td>false</td>
                <td>false</td>
              </tr>
            </tbody>
          </table>
        </div>
        <p>The output specification is similar to the input specification (but with no default values). When creating an app, you specify what kind of inputs your app is expected to create, and define names and labels for them. When your script runs, it is responsible for generating the respective outputs. If an output is marked as optional, your script is not required to produce it. See the <a href="#dev-script">app shell script</a> section for more information.</p>
        <div class="bs-callout bs-callout-primary bs-callout-darker">
          <h4>Output spec example</h4>
          <p>To continue our aforementioned example, here is a potential output specification for our example app:</p>
          <table class="table table-bordered">
            <thead>
              <th>Property</th>
              <th>Value for 1st output</th>
            </thead>
            <tbody>
              <tr>
                <td>Class</td>
                <td>file</td>
              </tr>
              <tr>
                <td>Name</td>
                <td>padded_intervals</td>
              </tr>
              <tr>
                <td>Label</td>
                <td>Padded BED result</td>
              </tr>
              <tr>
                <td>Help text</td>
                <td>The generated BED file with the padded genomic intervals.</td>
              </tr>
              <tr>
                <td>Optional?</td>
                <td>false</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
      <div id="dev-vm-env" class="h2">VM Environment</div>
      <div class="bs-docs-section">
        <p>Apps run inside a virtual machine (VM); a computer on the cloud with a specific environment. When authoring an app, you have the opportunity to configure the environment according to your needs, using the "VM Environment" tab.</p>
        <p>By default, apps do not have access to the Internet. Removing Internet access ensures that apps cannot communicate with the outside world over the Internet -- this increases user comfort and lowers the barriers for users to try out apps. If your app requires Internet access (for example, to communicate with a third-party database over the Internet, to fetch files from URLs, or to fetch and install external software at runtime), you can enable it in this tab.</p>
        <p>The default instance type denotes the particular hardware configuration that the app will run on. Each instance type comes with a specific amount of memory, number of CPU cores, and hard disk storage. See the section on <a href="#dev-instance-types">available instance types</a> below for more information. Although you can choose a default one in the "VM Environment" tab, users can still override the default choice when launching the app. This is useful if you have a single app that can work for both small inputs (such as an exome) and large inputs (such as a whole genome).</p>
        <div class="alert alert-info">
          <span class="fa fa-lightbulb-o" aria-hidden="true"></span> <strong>TIP:</strong> Make a smart choice of default instance type. Select an instance that would be suitable for typical inputs, and use the app's Readme to guide users as to how to adjust it when running your app with larger inputs. Jobs consume energy depending on the instance type used, so your pipeline may be wasteful if it does not use its default instance type efficiently.
        </div>
        <p>The operating system of the virtual machine is Ubuntu 14.04, with several <a href="/assets/packages.txt">preinstalled packages</a>. If your app requires additional Ubuntu packages, you can specify so in the "VM Environment" tab. For example, if your app needs Java, we recommend adding the "openjdk-7-jre-headless" package. If you are unsure as to what a certain package is called, you can use the <a href="http://packages.ubuntu.com">packages.ubuntu.com</a> website to locate packages (make sure to select the "trusty" distribution in the search form, as that is the codename for Ubuntu 14.04).</p>
        <p>If you need to load additional files onto the virtual machine and have them available to your app's shell script, such as executables, libraries, reference genome files or pretty much any other static files required for your execution, you can use <b>App assets</b>. Assets are tarballs that are uncompressed in the root folder of the virtual machine right before running your app script. The <a href="#dev-assets">App assets</a> section discusses in detail how to create, manage, and select assets for your app.</p>
        <p>The shell script of an app contains the shell code that will run inside the virtual machine. The script runs as root. During the script execution, the default working directory (home directory) is <code>/work</code>. For more information about the shell variables available to your script, and the handling of app inputs and outputs from your script, consult the <a href="#dev-script">App script</a> section.</p>
        <p>To summarize, here is what happens when your app is launched:</p>

        <table class="table table-bordered">
          <thead>
            <th>Step</th>
            <th>&nbsp;</th>
          </thead>
          <tbody>
            <tr>
              <td>1</td>
              <td>A new virtual machine with Ubuntu 14.04 and <a href="/assets/packages.txt">these preinstalled packages</a> is initialized.</td>
            </tr>
            <tr>
              <td>2</td>
              <td>Additional Ubuntu packages are installed per your app's spec.</td>
            </tr>
            <tr>
              <td>3</td>
              <td>Your app's assets are fetched and uncompressed in the root folder.</td>
            </tr>
            <tr>
              <td>4</td>
              <td>The job's input files are downloaded in subfolders under the <code>/work/in/</code> folder.</td>
            </tr>
            <tr>
              <td>5</td>
              <td>Shell variables are populated according to your job's inputs.</td>
            </tr>
            <tr>
              <td>6</td>
              <td>Your app's shell script is executed.</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div id="dev-instance-types" class="h2">Available instance types</div>
      <div class="bs-docs-section">
        <p>The precisionFDA system supports the following hardware configurations (instance types) for apps to run on:</p>

        <table class="table table-bordered">
          <thead>
            <th>Instance type</th>
            <th># of CPU cores</th>
            <th>Memory</th>
            <th>Hard Disk Storage</th>
          </thead>
          <tbody>
            <tr>
              <td>Baseline 2</td>
              <td>2</td>
              <td>3.8 GB</td>
              <td>32 GB</td>
            </tr>
            <tr>
              <td>Baseline 4</td>
              <td>4</td>
              <td>7.5 GB</td>
              <td>80 GB</td>
            </tr>
            <tr>
              <td>Baseline 8</td>
              <td>8</td>
              <td>15 GB</td>
              <td>160 GB</td>
            </tr>
            <tr>
              <td>Baseline 16</td>
              <td>16</td>
              <td>30 GB</td>
              <td>320 GB</td>
            </tr>
            <tr>
              <td>Baseline 32</td>
              <td>32</td>
              <td>60 GB</td>
              <td>640 GB</td>
            </tr>
            <tr>
              <td colspan=4></td>
            </tr>
            <tr>
              <td>High Mem 2</td>
              <td>2</td>
              <td>15 GB</td>
              <td>32 GB</td>
            </tr>
            <tr>
              <td>High Mem 4</td>
              <td>4</td>
              <td>30.5 GB</td>
              <td>80 GB</td>
            </tr>
            <tr>
              <td>High Mem 8</td>
              <td>8</td>
              <td>61 GB</td>
              <td>160 GB</td>
            </tr>
            <tr>
              <td>High Mem 16</td>
              <td>16</td>
              <td>122 GB</td>
              <td>320 GB</td>
            </tr>
            <tr>
              <td>High Mem 32</td>
              <td>32</td>
              <td>244 GB</td>
              <td>640 GB</td>
            </tr>
            <tr>
              <td colspan=4></td>
            </tr>
            <tr>
              <td>High Disk 2</td>
              <td>2</td>
              <td>3.8 GB</td>
              <td>160 GB</td>
            </tr>
            <tr>
              <td>High Disk 4</td>
              <td>4</td>
              <td>7.5 GB</td>
              <td>320 GB</td>
            </tr>
            <tr>
              <td>High Disk 8</td>
              <td>8</td>
              <td>15 GB</td>
              <td>640 GB</td>
            </tr>
            <tr>
              <td>High Disk 16</td>
              <td>16</td>
              <td>30 GB</td>
              <td>1280 GB</td>
            </tr>
            <tr>
              <td>High Disk 36</td>
              <td>36</td>
              <td>60 GB</td>
              <td>2880 GB</td>
            </tr>
          </tbody>
        </table>
      </div>
      <div id="dev-assets" class="h2">App assets</div>
      <div class="bs-docs-section">
        <p>App assets are the building blocks of apps. They are tarballs (file archives), which get uncompressed in the root folder of the virtual machine before the app script starts to run. They can contain executables (such as bioinformatics tools), static data (such as reference genomes and index files) or pretty much anything else that is required for an app to run.</p>
        <p>Just like regular files, app assets can be either private or publicly contributed to the precisionFDA community. Your app can choose among any accessible assets (whether private or public).</p>
        <div class="alert alert-info">
          <span class="fa fa-lightbulb-o" aria-hidden="true"></span> <strong>TIP:</strong> You can have a public app that uses a private asset. In that case, people will be able to run the app, but will not have access to the private executables. They will also be able to fork the app but their fork won't include the private assets. This may be an option of choice if you want to allow people to try out something without giving them access to the code. For more information consult the second table in the <a href="#publish">Publishing</a> section.
        </div>
        <p>To help get you started, the precisionFDA team has contributed a few popular app assets that you can include in your app's environment. The table below lists some examples of such public app assets:</p>

        <table class="table table-bordered">
          <thead>
            <th>Asset</th>
            <th>Contents</th>
          </thead>
          <tbody>
            <tr>
              <td>samtools-1.2</td>
              <td>The <code>/usr/bin/samtools</code> executable.</td>
            </tr>
            <tr>
              <td>htslib-1.2.1</td>
              <td>The <code>/usr/bin/bgzip</code> and <code>/usr/bin/tabix</code> executables.</td>
            </tr>
            <tr>
              <td>grch37-fasta</td>
              <td>The GRCh37 reference genome FASTA file (<code>/work/grch37.fa</code>).</td>
            </tr>
            <tr>
              <td>bwa-0.7.12</td>
              <td>The <code>/usr/bin/bwa</code> executable.</td>
            </tr>
            <tr>
              <td>bwa-grch37</td>
              <td>The GRCh37 reference genome, indexed for BWA.</td>
            </tr>
          </tbody>
        </table>
        <p>When editing an app, in the "VM Environment" tab, you will see a list of assets that have been selected for inclusion in the app's virtual machine. You can remove assets by hovering over them and clicking the "X" button on the right hand side. You can select additional assets by clicking the "Select assets" button, which will pop up the asset selector.</p>
        <p>The selector lists all available assets on the left hand side. Clicking on the name of an asset, or on the checkbox next to it, will select that asset for inclusion. Clicking on the whitespace surrounding the asset name, or on the right-pointing arrow next to the asset name will display information about the asset (but not toggle the selection). <u>Each asset comes with documentation</u>, which is meant to describe what is the asset and how it can be used. In addition, the system displays a list of all files that are found inside the tarball.</p>
        <p>We understand that asset names may not always be indicative of their contents; for example, many people would recognize <code>tabix</code> as the executable that indexes VCF files, but fewer people would recognize <code>htslib</code> as the asset containing that executable. For this reason, the precisionFDA system includes a feature that allows you to search filenames across all assets. In the asset selector, type a search keyword (such as <code>tabix</code>) in the upper left corner. The asset list will be filtered to show you assets which include that file (such as <code>htslib</code>), as well as assets whose name starts with that prefix.</p>
        <p>To upload your own assets, or to perform more detailed asset management (such as download an asset to take a look at it yourself, or delete an asset you've previously uploaded) click "Manage your assets", from either the asset selector or the "VM Environment" tab (or "Manage Assets" from the Apps listing page). You will be taken to a page listing all the precisionFDA assets (your private ones, and all public ones). Click on an asset's name to see asset details, and to perform actions such as download, delete, or edit its readme. Click "Create Assets" at the top to be presented with instructions on how to upload your own assets. The next section discusses the process in detail.</p>
      </div>
      <div id="dev-own-assets" class="h2">Your own assets</div>
      <div class="bs-docs-section">
        <p>To upload an asset, you must first prepare the files that will be included in the tarball archive. On your computer, start by creating a "fake root" folder and by assembling your files underneath it.</p>
        <p>Since the asset will be uncompressed in the root folder on the cloud, it is important for the tarball to contain the proper subfolders inside of it. If an asset tarball does not have any subfolders, then its files will be placed directly inside the root folder (i.e. in <code>/</code>), which is not typically desired.</p>
        <p>Therefore, create the <code>usr/bin</code> subfolder under the "fake root" and place there any binaries, and create the <code>work</code> subfolder for any working directory files. Since your app's script starts its execution inside <code>/work</code>, any files you place under that folder will be readily accessible. For example, if your asset includes a file <code>/work/GenomeAnalysisTK.jar</code>, you can use it inside your script without any other folder designation, i.e. like this: <code>java -jar GenomeAnalysisTK.jar</code>.</p>
        <p>If you need to compile binaries for Ubuntu 14.04, or otherwise experiment with a Linux environment similar to the one that apps run on, download and install the freely available <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a> virtualizer. Then, from the "Create Assets" page, download the precisionFDA virtual machine image and double-click it to open it in VirtualBox. Power on the machine and log in as the <code>ubuntu</code> user. This environment contains the same Ubuntu packages as the cloud environment where apps run.</p>
        <div class="alert alert-info">
          <span class="fa fa-lightbulb-o" aria-hidden="true"></span> <strong>TIP:</strong> From your host operating system (such as the OS X Terminal) you can SSH into the VM by typing <code>ssh -p 2222 ubuntu@localhost</code>. This will allow you to use your host operating system's copy/paste capabilities, or to transfer files in and out of the VM.
        </div>
        <p>The following table summarizes ways in which you can use the VirtualBox machine to prepare content for inclusion in your fake root:</p>
        <table class="table table-bordered">
          <thead>
            <th>To include...</th>
            <th>Do this...</th>
          </thead>
          <tbody>
            <tr>
              <td>Compilable executables</td>
              <td><code>make</code><br><code>mkdir -p fake_root/usr/bin</code><br><code>cp <em>program</em> fake_root/usr/bin</code></td>
            </tr>
            <tr>
              <td>Complex compilable packages</td>
              <td><code>./configure --prefix=/opt/<em>packagename</em></code><br><code>sudo make install</code><br><code>mkdir -p fake_root/opt/</code><br><code>cp -R /opt/<em>packagename</em> fake_root/opt/</code></td>
            </tr>
            <tr>
              <td>Python packages</td>
              <td><code>pip install --user <em>packagename</em></code><br><code>mkdir -p fake_root/work/</code><br><code>mv ~/.local fake_root/work/</code></td>
            </tr>
            <tr>
              <td>R packages</td>
              <td><code>R</code><br><code>&gt; install.packages(...)</code><br>Answer Y to the question "create a personal library"<br><code>mkdir -p fake_root/work/</code><br><code>mv ~/R fake_root/work/</code></td>
            </tr>
          </tbody>
        </table>
        <p>After assembling your fake_root, prepare a Readme file for your asset. This file needs to contain <a href="https://jonschlinkert.github.io/remarkable/demo/">Markdown syntax</a>. Below is an example of the Readme file included with the htslib-1.2.1 public asset: (note the extra two spaces after tabix-1.2.1.html -- this is how you introduce line breaks in markdown)</p>
        <pre>
This asset provides the `bgzip` and `tabix` executables.

Include this asset if your app needs to compress and index
a VCF file.

### Example usage

The following produces `file.vcf.gz` and `file.vcf.tbi`:

```
bgzip file.vcf
tabix -p vcf file.vcf.gz
```

### Links

http://www.htslib.org/doc/tabix-1.2.1.html
https://github.com/samtools/htslib/releases/tag/1.2.1</pre>
        <p>Download the precisionFDA uploader by clicking the respective button in the "Create Assets" page. The downloaded archive contains a single python script, <code>pfda</code>, which you can run to upload the asset. (NOTE: It requires Python 2.7, as well as the python 'requests' and 'futures' packages, so ensure you have those available in your environment).</p>
        <p>The tool requires an "authorization key" in order to authenticate the client against the precisionFDA system. You can get a key by clicking the respective link in the "Add Assets" page. Copy the key from that page and paste it in the command below where it says <strong>KEY</strong>. For your security, the key is valid for 24h.</p>
        <p>Run <code>./pfda upload-asset --auth KEY --name my-asset.tar.gz --root /path/to/fake_root --readme my-asset.txt</code>. This command will archive the contents of the fake root into the named tarball, and upload it to precisionFDA along with the contents of the readme file. The tarball name must end in either <code>.tar.gz</code> or <code>.tar</code> (in which latter case it will not be compressed).</p>
        <div class="alert alert-info">
          <span class="fa fa-lightbulb-o" aria-hidden="true"></span> <strong>TIP:</strong> The uploader saves your key in <code>$HOME/.config/precision-fda/config.json</code>, so after you have run it once, you don't need to specify the key in subsequent invocations.
        </div>

      </div>
      <div id="dev-script" class="h2">App script</div>
      <div class="bs-docs-section">
        <p>When creating an app, the "Script" tab provides you with an editor where you can write the shell script that will be executed. The script will run as root, inside the <code>/work</code> folder (which is also set as the home directory during execution). The script is <code>source</code>'ed from inside bash, so you don't need to include any <code>#!/bin/bash</code> headers as they will be ignored. Bash by default runs with the <code>set -e -x -o pipefail</code> options.</p>
        <p>App inputs are handled in the following way:<br>
        <ul><li>For string, integer, float and boolean inputs, the system defines a shell variable with the same name. Its value is set to whatever value the user provided for that input (or empty, if that input is optional and no value was provided)</li>
          <li>For files, the system downloads each file input under <code>/work/in/<em>field</em>/<em>filename</em></code>. For instance, in the <a href="#dev-io">example we gave earlier</a>, if a user provides a file called <code>trusight.bed</code> for the input field <code>intervals</code>, the system will download the file into <code>/work/in/intervals/trusight.bed</code>. In addition, the following variables are defined:
            <table class="table table-bordered">
              <thead>
                <th>Variable</th>
                <th>Content</th>
              </thead>
              <tbody>
                <tr>
                  <td><code>$<em>field</em></code></td>
                  <td>The unique system id (i.e. file-Bk0kjkQ0ZP01x1KJqQyqJ7yq) of whatever file was assigned for that field.</td>
                </tr>
                <tr>
                  <td><code>$<em>field</em>_name</code></td>
                  <td>The filename.</td>
                </tr>
                <tr>
                  <td><code>$<em>field</em>_path</code></td>
                  <td>The full file path, i.e. <code>/work/in/<em>field</em>/<em>filename</em></code>.</td>
                </tr>
                <tr>
                  <td><code>$<em>field</em>_prefix</code></td>
                  <td>The filename without its suffix (and if its suffix is ".gz", without its second suffix, i.e. without ".tar.gz", ".vcf.gz", or ".fastq.gz").</td>
                </tr>
              </tbody>
            </table>
          </li>
        </ul>
        <div class="bs-callout bs-callout-primary bs-callout-darker">
          <h4>Example of system-defined variables</h4>
          <p>For our <a href="#dev-io">example</a>, the system would define the following variables:</p>
          <table class="table table-bordered">
            <thead>
              <th>Variable</th>
              <th>Content</th>
            </thead>
            <tbody>
              <tr>
                <td><code>$intervals</code></td>
                <td><code>file-Bk0kjkQ0ZP01x1KJqQyqJ7yq</code></td>
              </tr>
              <tr>
                <td><code>$intervals_name</code></td>
                <td><code>trusight.bed</code></td>
              </tr>
              <tr>
                <td><code>$intervals_path</code></td>
                <td><code>/work/in/intervals/trusight.bed</code></td>
              </tr>
              <tr>
                <td><code>$intervals_prefix</code></td>
                <td><code>trusight</code></td>
              </tr>
            </tbody>
          </table>
          <p>The system defines the prefix variable because it can be often used to name results. In our example app, we can name the padded intervals <code>"$intervals_prefix".padded.bed</code>.</p>
        </div>
        <p>Your script needs to communicate back to the system its outputs. This is handled via a helper utility called <code>emit</code>. Use it as follows:</p>
        <ul>
          <li>For string, integer, float and boolean outputs, type <code>emit&nbsp;&nbsp;<em>field</em>&nbsp;&nbsp;<em>value</em></code>. For example, if you've defined an output field called <code>qc_pass</code> of boolean type, use <code>emit qc_pass true</code> to set it to true.</li>
          <li>For file outputs, type <code>emit&nbsp;&nbsp;<em>field</em>&nbsp;&nbsp;<em>filename</em></code>. This command will upload the particular file from the local hard disk of the virtual machine onto the cloud storage, and assign it to that field.</li>
        </ul>
        <div class="bs-callout bs-callout-primary bs-callout-darker">
          <h4>Example of app script</h4>
          <p>To put it all together, here is what the script would look like for our example app:</p>
          <pre style="white-space: nowrap">bedtools slop -i "$intervals_path" -g grch37.chrsizes -b "$padding" &gt;"$intervals_prefix".padded.bed<br>
emit padded_intervals "$intervals_prefix".padded.bed</pre></p>
        </div>
      </div>
      <div id="dev-bash" class="h2">Bash tips</div>
      <div class="bs-docs-section">
        <p>Bash is the shell interpreter that runs your app's shell script. It is the most popular shell interpreter in Linux distributions, and also used to power the OS X Terminal app. In most systems you can reach the bash manual by typing <code>man bash</code>.</p>
        <p>On precisionFDA, your app's script runs with the <code>set -e -x -o pipefail</code> options. These options have the following effects:</p>
        <table class="table table-bordered">
          <thead>
            <th>Option</th>
            <th>Effect</th>
          </thead>
          <tbody>
            <tr>
              <td><code>-e</code></td>
              <td>The script will halt as soon as any command fails.</td>
            </tr>
            <tr>
              <td><code>-x</code></td>
              <td>The script will echo every command as it is executed into the output logs.</td>
            </tr>
            <tr>
              <td><code>‑o&nbsp;pipefail</code></td>
              <td>The script will halt as soon as any command fails in a pipeline of commands, i.e. <code>cmd1 | cmd2 | cmd3</code>.</td>
            </tr>
          </tbody>
        </table>
        <div class="alert alert-info">
          <span class="fa fa-lightbulb-o" aria-hidden="true"></span> <strong>TIP:</strong> We use <code>pipefail</code> to ensure that code such as <code>zcat file.vcf.gz | head >vcf-header.txt</code> would fail if the input file was corrupted and could not be uncompressed. Without pipefail, a failure in the first part (<code>zcat</code>) of the pipeline would not cause this command to fail, so your script would have continued running. However, this means that you must be careful to not include any commands which may return non-zero exit status in your script. For example, <code>grep chr1 some_file | wc -l &gt;chr1-counts.txt</code> would fail if there are no <code>chr1</code> entries in <code>some_file</code>, instead of outputting the number <code>0</code> to <code>chr1-counts.txt</code> (because when grep does not find something, it fails). If you are worried about this behavior, you can undo the option via <code>set +o pipefail</code>.
        </div>
        <p>When using bash variables that refer to a single unit (such as a filename, or a value that should not be further tokenized or otherwise interpreted on the command line), it is <strong>strongly recommended</strong> that you enclose such variables within double quotes, i.e. <code>"$file_path"</code> instead of <code>$file_path</code>. This will allow you to handle corner cases such as spaces included in the filename.</p>
      </div>
      <div id="dev-fork" class="h2">Forking an app</div>
      <div class="bs-docs-section">
        <p>When viewing any app, clicking the "Fork" button will bring up the app editor and initialize it with the specification of the original app. You can make any changes and then save them into a new private app owned by you. (Unlike GitHub, precisionFDA does not keep track of forks, and the operation is always private).</p>
        <p>In addition, this feature can be used to take a peek at the insides of an app &mdash; just fork it to bring up the editor, and the simply cancel the operation. This allows you to see the app's script, assets, etc.</p>
      </div>
      <div id="notes" class="h1">Notes</div>
      <div class="bs-docs-section">
        <p>The Notes section lets you write and publish rich notes describing your thoughts and your work; for example, you can discuss how you used files, comparisons, and apps&mdash;which you can also attach to the note&mdash;to prove a certain point or to document a procedure. You can read what others have reported and access their attachments to take a closer look at their work or even reproduce it on your own.</p>

        <p>Notes are listed as cards, with their title at the top, the author's organization handle and username at the bottom. If there are any attachments, the attached item counts are also displayed. The following icons are used to denote each collection: <span class="fa fa-files-o"> </span> = Files, <span class="fa fa-bullseye"> </span> = Comparisons, <span class="fa fa-tasks"> </span> = Jobs, <span class="fa fa-cubes"> </span> = Apps, and <span class="fa fa-file-archive-o"> </span> = Assets.</p>

        <p>Clicking on a note brings up the full note text. If the note has attachments, those are listed on the right hand side. Each attachment contains an icon to identify its type: <span class="fa fa-file-o"> </span> = File, <span class="fa fa-area-chart"> </span> = Comparison, <span class="fa fa-tasks"> </span> = Job, <span class="fa fa-cube"> </span> = App, and <span class="fa fa-file-archive-o"> </span> = Asset.</p>
      </div>
      <div id="notes-edit" class="h2">Editing notes</div>
      <div class="bs-docs-section">
        <p>Notes are written using <a href="https://jonschlinkert.github.io/remarkable/demo/">Markdown syntax</a>. While editing a note, you can switch between editing the Markdown content and previewing the result. The editing mode also allows you to remove any attachments. When you are happy with your edits, click Save to store your changes.</p>

        <p>To attach an item (such as a file, an app, a job, a comparison, or an asset) to a note, navigate to the page of that item and click "Attach to Note". A list of all the notes authored by you will pop up. Select one or more notes and click "Attach". If you attach a private item to a public note, the system <strong>does not</strong> adjust any permissions; you need to separately publish that item so that others can access it when they read your note.</p>

        <p>You don't need to own an item in order to attach it &mdash; you are welcome to attach other people's items to your notes. However, if they later delete one of these items, the attachment will be automatically removed.</p>
      </div>
      <div id="notes-ideas" class="h2">Ideas for using notes</div>
      <div class="bs-docs-section">
        <p>Notes often function as a way to document information about their attachments. For that reason, when you visit the page of an item that has been attached to one or more notes, the system will show a "Notes" tab containing all related notes.</p>

        <p>When publishing items (like files or comparisons) to the precisionFDA community, it's a good idea to also publish a note describing why you are contributing these items and what you expect community members to do with them. This way, when someone stumbles upon a published item of yours, they can look up the relevant note to learn more. For more information, see <a href="#publish">Publishing</a>.</p>

        <div class="alert alert-info">
          <span class="fa fa-lightbulb-o" aria-hidden="true"></span> <strong>TIP:</strong> Notes can also function as organizational structures, i.e. as "virtual folders" which contain the attached items. For example, you can create a "scrapbook" note and while browsing the rest of the website, if you come across an interesting item, attach it to your scrapbook.
        </div>

        <p>Tell us how you'd like this feature to evolve. Are you interested in the ability to comment on other people's notes? Would you care to "subscribe" to a note and get notifications when it changes? Should notes be collaboratively edited? <a href="mailto:precisionfda@fda.hhs.gov">Drop us a note</a> (no pun intended!) with your ideas and suggestions.</p>
      </div>
      <div id="track" class="h1">Tracking</div>
      <div class="bs-docs-section">
        <p>Tracking is a precisionFDA feature that allows you to investigate the provenance of an item. Clicking the "Track" button from any page (file, app, job, comparison, note) generates a provenance graph. Each node in the graph denotes an item, and each arrow denotes a relationship between two items. An arrow points from a source item towards a derived item, and it typically means "the source item is used as an ingredient in the derived item". The system keep track of the following relationships:</p>
        <table class="table table-bordered">
          <thead>
            <th>Derived item</th>
            <th>Source items / Ingredients</th>
          </thead>
          <tbody>
            <tr>
              <td>App</td>
              <td>The app's assets.</td>
            </tr>
            <tr>
              <td>App asset</td>
              <td>(none)</td>
            </tr>
            <tr>
              <td>Comparison</td>
              <td>The files that were used as inputs to the comparison.</td>
            </tr>
            <tr>
              <td>File</td>
              <td>The job that the file was generated from.</td>
            </tr>
            <tr>
              <td>Job</td>
              <td>The app that was run for the job, and the files that were used as inputs to the job.</td>
            </tr>
            <tr>
              <td>Note</td>
              <td>The note's attachments.</td>
            </tr>
          </tbody>
        </table>
        <p>When generating the graph, the item currently investigated is on the bottom. Its source items are above it, and their source items above them, etc. Items may contain multiple arrows &mdash; for example an app that has been run multiple times &mdash; but following arrows will always take you from top to bottom and never lead to any endless cycles. For complex cases, such as a note with many attachments, or a file generated by running a series of consecutive jobs, the graph may get very wide or very deep. In that case, use your browser's zoom feature to see more of the graph in your browser window, or scroll your browser's viewport accordingly.</p>
        <p>The precisionFDA system uses the <a href="https://github.com/cpettitt/dagre/wiki">Dagre</a> library to lay out the graph in two dimensions. The library implements a layout algorithm which tries to minimize arrow crossings and other avoidable overlaps, but does not always produce optimal layouts. We consider this rendering to be <strong>experimental</strong>.</p>
        <p>Graph nodes are colored according to the following guide:</p>
        <table class="table table-bordered">
          <thead>
            <th>Color</th>
            <th>Meaning</th>
          </thead>
          <tbody>
            <tr>
              <td class="bg-track_public"></td>
              <td>The item is public.</td>
            </tr>
            <tr>
              <td class="bg-track_private"></td>
              <td>The item is private and owned by you.</td>
            </tr>
            <tr>
              <td class="bg-track_not_yours"></td>
              <td>The item is private and owned by someone else.</td>
            </tr>
          </tbody>
        </table>
        <p>When a private item (owned by someone else) is encountered during graph construction, the graph stops there and does not include further provenance for that item. Furthermore, the system renders the item via its unique id, and not its name. In other words, the graph construction takes into account your access. Other users may see a different graph depending on their access (for example, the owner of the private item will be able to see further provenance).</p>
      </div>
      <div id="publish" class="h1">Publishing</div>
      <div class="bs-docs-section">
        <p>Publishing is the process by which you can make any item accessible to the greater precisionFDA community. By using publishing, you can contribute reference data, software, results, or pretty much anything else, so that others can use them. The process of publishing changes the access permissions of an item from 'private' to 'public'. <strong>NOTE:</strong> Currently there is no way to "unpublish" an item (other than deleting it).</p>
        <p>Since publishing an item means that others will be able to access it, it's very important to understand the exact implications, to ensure that you make a conscious decision. The following table summarizes what it means to publish items of a given type:</p>
        <table class="table table-bordered">
          <thead>
            <th>Type</th>
            <th>What does it mean to publish an item of that type?</th>
          </thead>
          <tbody>
            <tr>
              <td>App</td>
              <td>The app will appear in everyone's list of available apps to run. Users will be able to run the app, and view the app's specification (input and output spec, VM environment details and app shell script).</td>
            </tr>
            <tr>
              <td>App asset</td>
              <td>The asset will appear in everyone's list of available assets. Users will be able to use the asset when making apps, view the asset's information (readme, and list of files), and download the asset.</td>
            </tr>
            <tr>
              <td>Comparison</td>
              <td>The comparison will appear in everyone's list of available comparisons. Users will be able to view comparison details (including statistics such as sensitivity and positive predictive value), visualize the comparison, and download any of the comparison output files.</td>
            </tr>
            <tr>
              <td>File</td>
              <td>The file will appear in everyone's list of available files. Users will be able to download the file and use it as input in their jobs.</td>
            </tr>
            <tr>
              <td>Job</td>
              <td>Users will be able to view job details, such as which parameters/values were provided as inputs. <strong>NOTE:</strong> users will not see the job's log.</td>
            </tr>
            <tr>
              <td>Note</td>
              <td>The note will appear in everyone's list of notes. Users will be able to read the note.</td>
            </tr>
          </tbody>
        </table>
        <p>The publishing interface presents you with the item you chose to publish at the top, and preselects that item for publication. If the item has related items, then those are also offered for publication. Among the related items, those that are already public are shown as such and cannot be selected for publication. Those that are owned by you and can be published have a checkbox next to them. Tick that checkbox to enable publication. If the item you tick contains additional related items, those will be presented as well, etc. <strong>IMPORTANT:</strong> For items with a long chain of dependencies (such as a file produced by a series of consecutive jobs) this interface can get very deep. For that reason, prior to publishing any item, <u>we strongly suggest that you first <a href="#track">track the item</a> to understand exactly its dependencies and their access level</u>. The items offered for publication are derived in the same way as the "source items / ingredients" shown in the tracking graph. The tracking graph offers a more concise way to summarize the full landscape of relationships.</p>
        <p>For example, if you publish a note, the publishing interface will ask if you would like to also publish its attachments. If you publish a file, it will offer to publish the job it was generated from, and the app that was used for that job, etc. We recommend publishing related items, to ensure that others have access to complete information and are able to reproduce your work. To better understand the implications of NOT publishing a related item and instead keeping it private, consult the following table:</p>
        <table class="table table-bordered">
          <thead>
            <th>If you publish a...</th>
            <th>But not a related...</th>
            <th>Then</th>
          </thead>
          <tbody>
            <tr>
              <td>Note</td>
              <td>Attachment</td>
              <td>When reading the note, users will see the attachment by its id and not its name (i.e. file-Bk0kjkQ0ZP01x1KJqQyqJ7yq) and will not be able to access the attachment.</td>
            </tr>
            <tr>
              <td>App</td>
              <td>App asset</td>
              <td>Users will still be able to run the app on precisionFDA, but they will not be able to access its private app asset. As a result, when users fork the app, the private asset will not be included in the list of assets, essentially leading to a nonfunctional fork. Moreover, users won't be able to run the app outside of precisionFDA, since they can't download and extract the private asset.<br><br>Keeping an asset private may be needed in the case where you don't want people to access sensitive software information, such as any code that is not open-source and whose executables you don't want to openly distribute.</td>
            </tr>
            <tr>
              <td>Comparison</td>
              <td>Input file</td>
              <td>When viewing comparison details, users will see the input files by their ids and not their names (i.e. file-Bk0kjkQ0ZP01x1KJqQyqJ7yq) and will not be able to access the input files. However, they will still be able to access the comparison outputs, which pretty much provide for a copy of the comparison inputs (since they simply split the input in terms of true positives and false positives, etc.)</td>
            </tr>
            <tr>
              <td>File</td>
              <td>Job</td>
              <td>In the file listing, users will see a job id (i.e. job-BjgGbqQ02308XVYgV4px5Zy2) in the "Origin" column, and will not be able to see further information as to how the file got generated.<br><br>Keeping a job private may be needed in the case where the job accessed sensitive information. For example, when you bring a file into precisionFDA by running the "Fetch file from URL", and later publish the file, you will be offered to publish the job. If the input URL is sensitive information, then keep the job private.</td>
            </tr>
            <tr>
              <td>Job</td>
              <td>Input file</td>
              <td>When viewing job details, users will see the input files by their ids and not their names (i.e. file-Bk0kjkQ0ZP01x1KJqQyqJ7yq) and will not be able to reproduce the results starting from the same inputs, since those are inaccessible to them.</td>
            </tr>
            <tr>
              <td>Job</td>
              <td>App</td>
              <td>When viewing job details, users will see the app by its id and not its name (i.e. app-Bk7jzXj02902969jx5q2pfzq) and will not be able to reproduce the work, since they can't run that app.</td>
            </tr>
          </tbody>
        </table>
        <div class="alert alert-info">
          <span class="fa fa-lightbulb-o" aria-hidden="true"></span> <strong>TIP:</strong> You can always use <a href="#track">the tracking feature</a> review the permissions of an item and its related items, both before and after publication. This will give you an idea of what is accessible to everybody (shown in green) versus only to you (shwon in white).
        </div>
      </div>
    </div>

    <!-- SIDEBAR NAVIGATION -->
    <div class="col-sm-8">
      <nav class="bs-docs-sidebar hidden-print hidden-xs hidden-sm">
        <ul class="nav bs-docs-sidenav">
          <li class="active">
            <a href="#introduction">Introduction</a>
          </li>
          <li>
            <a href="#files">Files</a>
            <ul class="nav">
              <li><a href="#files-list">Listing files</a></li>
              <li><a href="#files-uploading">Uploading files</a></li>
              <li><a href="#files-origin">Tracking file origin</a></li>
              <li><a href="#files-details">File details</a></li>
            </ul>
          </li>
          <li>
            <a href="#comparisons">Comparisons</a>
            <ul class="nav">
              <li><a href="#comparisons-new">Creating a new comparison</a></li>
              <li><a href="#comparisons-bed">BED files</a></li>
              <li><a href="#comparisons-results">Understanding comparison results</a></li>
              <li><a href="#comparisons-visualize">Visualizing a comparison</a></li>
              <li><a href="#comparisons-ideas">Ideas for using comparisons</a></li>
            </ul>
          </li>
          <li>
            <a href="#apps">Apps</a>
            <ul class="nav">
              <li><a href="#apps-overview">Overview &amp; Terminology</a></li>
              <li><a href="#apps-listing">Listing apps</a></li>
              <li><a href="#apps-run">Running an app</a></li>
              <li><a href="#job-details">Job details and logs</a></li>
            </ul>
          </li>
          <li>
            <a href="#dev">Creating Apps</a>
            <ul class="nav">
              <li><a href="#dev-name">App naming conventions</a></li>
              <li><a href="#dev-io">Input and Output spec</a></li>
              <li><a href="#dev-vm-env">VM Environment</a></li>
              <li><a href="#dev-instance-types">Available instance types</a></li>
              <li><a href="#dev-assets">App assets</a></li>
              <li><a href="#dev-own-assets">Your own assets</a></li>
              <li><a href="#dev-script">App script</a></li>
              <li><a href="#dev-bash">Bash tips</a></li>
              <li><a href="#dev-fork">Forking an app</a></li>
            </ul>
          </li>
          <li>
            <a href="#notes">Notes</a>
            <ul class="nav">
              <li><a href="#notes-edit">Editing notes</a></li>
              <li><a href="#notes-ideas">Ideas for using notes</a></li>
            </ul>
          </li>
          <li>
            <a href="#track">Tracking</a>
          </li>
          <li>
            <a href="#publish">Publishing</a>
          </li>
        </ul>
      </nav>
    </div>
  </div>
</div>

<script>
  $('body').scrollspy({ target: '#about-docs' })
  $('.bs-docs-sidebar').affix({
    offset: {
      top: $('.bs-docs-sidebar').offset().top,
      bottom: function () {
        return (this.bottom = $('footer').outerHeight(true))
      }
    }
  })
</script>
